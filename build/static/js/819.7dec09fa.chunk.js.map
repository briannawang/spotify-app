{"version":3,"file":"static/js/819.7dec09fa.chunk.js","mappings":"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","sources":["components/PlaylistView.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as $ from \"jquery\";\nimport './PlaylistView.css';\n\nconst TrackView = React.lazy(() => import('./TrackView'));\n\nconst cPlaylist = {\n    uri: \"\",\n    name: \"\",\n    id: \"\",\n    tracks: {\n        href: \"\",\n        total: 0\n    },\n    offset: 0\n}\n\nconst uPlaylist = {\n    items: [{\n        uri: \"\",\n        name: \"\",\n        id: \"\",\n        tracks: {\n            href: \"\",\n            total: 0\n        },\n        images: [{\n            url: \"\"\n        }]\n    }],\n    total: 0\n}\n\nconst escapeUrl = (url) => {\n    return encodeURIComponent(url).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n}\n\nconst handleGoBack = (setShowTracks) => {\n    setShowTracks(false);\n}\n\nconst handleClickPlaylist = (playlist, setShowTracks, setUrl, setClickedPlaylist) => {\n    let offset = (playlist.tracks.total > 50) ? playlist.tracks.total - 50 : 0;\n            \n    setUrl(playlist.tracks.href + \"?offset=\" + offset + \"&limit=50&fields=total,items(track(id,name,album(images(url)),artists(name),duration_ms, uri))\");\n    playlist.offset = offset;\n    setClickedPlaylist(playlist);\n    setShowTracks(true);\n}\n\nfunction PlaylistRow({playlist, setShowTracks, setUrl, setClickedPlaylist}) {\n    return (\n        <tr className=\"list_row\" onClick={() => {handleClickPlaylist(playlist, setShowTracks, setUrl, setClickedPlaylist)}}>\n            <td className=\"list_item\"><img src={playlist.images[0].url} className=\"small_cover\" alt=\"\"/></td>\n            <td className=\"list_item\">{playlist.name}</td>\n        </tr>\n    );\n}\n\nfunction PlaylistDisplay({userPlaylist, setShowTracks, setUrl, setClickedPlaylist}) {\n    var playlistList = [];\n    for (var i = 0; i < userPlaylist.items.length; i++) {\n        playlistList.push(<PlaylistRow playlist={userPlaylist.items[i]} setShowTracks={setShowTracks} setUrl={setUrl} setClickedPlaylist={setClickedPlaylist}/>);\n    }\n    return (\n        <div className=\"playlist-container\">\n            <p>playlist</p>\n            <div className=\"playlist_list\">\n                <table className=\"list_table\">\n                    {playlistList}\n                </table>\n            </div>\n        </div>\n    );\n}\n\nfunction PlaylistView({token, userId}) {\n    const [userPlaylist, setUserPlaylist] = useState(uPlaylist);\n    const [isShowTracks, setShowTracks] = useState(false);\n    const [clickedPlaylist, setClickedPlaylist] = useState(cPlaylist);\n    const [url, setUrl] = useState(\"\");\n    const [noData, setNoData] = useState(true);\n\n    useEffect(() => {\n        if (userId !== \"\") {\n            $.ajax({\n                url: \"https://api.spotify.com/v1/users/\" + escapeUrl(userId) + \"/playlists?offset=0&limit=50\",\n                type: \"GET\",\n                beforeSend: xhr => {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n                },\n    \n                success: data => {\n                    if(!data) {\n                        setNoData(true);\n                        return;\n                    }\n    \n                    setUserPlaylist(data);\n                    setNoData(false);\n                }\n            });\n        }\n      \n    }, [userId]);\n\n    if (noData) { \n        return (\n            <><div className=\"playlist-display\"></div>\n            </>)\n    } else {\n        return (\n            <>\n                <button className=\"back_button\" onClick={() => {handleGoBack(setShowTracks)}}>âŒœ</button>\n                {!isShowTracks ? \n                    <div className=\"playlist-display\">\n                        <PlaylistDisplay userPlaylist={userPlaylist} setShowTracks={setShowTracks} setUrl={setUrl} setClickedPlaylist={setClickedPlaylist}/>\n                    </div>\n                    :\n                    <TrackView token={token} url={url} title={clickedPlaylist.name} context_uri={clickedPlaylist.uri} offset={clickedPlaylist.offset}/>\n                }\n            </>\n        );\n    }\n}\n\nexport default PlaylistView\n"],"names":["TrackView","React","cPlaylist","uri","name","id","tracks","href","total","offset","uPlaylist","items","images","url","escapeUrl","encodeURIComponent","replace","escape","PlaylistRow","playlist","setShowTracks","setUrl","setClickedPlaylist","className","onClick","handleClickPlaylist","src","alt","PlaylistDisplay","userPlaylist","playlistList","i","length","push","token","userId","useState","setUserPlaylist","isShowTracks","clickedPlaylist","noData","setNoData","useEffect","$","type","beforeSend","xhr","setRequestHeader","success","data","handleGoBack","title","context_uri"],"sourceRoot":""}